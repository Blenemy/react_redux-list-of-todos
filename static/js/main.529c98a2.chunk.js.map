{"version":3,"sources":["features/currentTodo.ts","types/Status.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoTable/TodoTable.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["TodoActionTypes","Status","FilterActions","actions","payload","type","SetTodo","RemoveTodo","currentTodoReducer","state","action","initialState","status","All","query","QueryAction","StatusAction","filterReducer","ClearAction","latestTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoTable","selectedTodo","dispatch","useDispatch","map","todo","className","id","completed","cn","title","onClick","TodoList","length","TodoFilter","todoStatus","onSelect","value","onChange","placeholder","event","target","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","userId","useState","user","setUser","useEffect","getUser","href","name","useAppSelector","useSelector","App","isLoading","setIsLoading","a","response","todosActions","Error","fetchData","visibleTodos","Active","Completed","filterStatus","toLowerCase","includes","filterActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.529c98a2.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nenum TodoActionTypes {\n  SetTodo = 'currentTodo/SET',\n  RemoveTodo = 'currentTodo/REMOVE',\n}\n\ntype RemoveTodoAction = { type: TodoActionTypes.RemoveTodo };\n\ntype SetTodoAction = {\n  type: TodoActionTypes.SetTodo;\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({\n  type: TodoActionTypes.RemoveTodo,\n});\nconst setTodo = (payload: Todo): SetTodoAction => ({\n  type: TodoActionTypes.SetTodo, payload,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case TodoActionTypes.SetTodo:\n      return action.payload;\n\n    case TodoActionTypes.RemoveTodo:\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Status } from '../types/Status';\n\nenum FilterActions {\n  StatusAction = 'filter/CHANGE_STATUS',\n  QueryAction = 'filter/CHANGE_QUERY',\n  ClearAction = 'filter/CLEAR_QUERY',\n}\n\ntype StatusAction = { type: FilterActions.StatusAction, payload: Status };\ntype QueryAction = { type: FilterActions.QueryAction, payload: string };\ntype ClearAction = { type: FilterActions.ClearAction };\n\ntype Actions = StatusAction | QueryAction | ClearAction;\n\nconst changeStatus = (payload: Status): StatusAction => ({\n  type: FilterActions.StatusAction, payload,\n});\n\nconst changeQuery = (payload: string): QueryAction => ({\n  type: FilterActions.QueryAction, payload,\n});\n\nconst clear = (): ClearAction => ({ type: FilterActions.ClearAction });\n\nconst initialState = {\n  status: Status.All,\n  query: '',\n};\n\nconst filterReducer = (state = initialState, actions: Actions) => {\n  switch (actions.type) {\n    case FilterActions.StatusAction:\n      return {\n        ...state,\n        status: actions.payload,\n      };\n    case FilterActions.QueryAction:\n      return {\n        ...state,\n        query: actions.payload,\n      };\n    case FilterActions.ClearAction:\n      return {\n        ...state,\n        query: '',\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { clear, changeQuery, changeStatus };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET_TODOS', payload: Todo[] };\n\nconst addTodos = (payload: Todo[]): SetTodos => ({\n  type: 'todos/SET_TODOS', payload,\n});\n\nconst initialState = {\n  latestTodos: [],\n};\n\nconst todosReducer = (state = initialState, actions: SetTodos) => {\n  switch (actions.type) {\n    case 'todos/SET_TODOS':\n      return {\n        ...state,\n        latestTodos: [...state.latestTodos, ...actions.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { addTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = {\n  currentTodo: ReturnType<typeof currentTodoReducer>;\n  filter: ReturnType<typeof filterReducer>;\n  todos: ReturnType<typeof todosReducer>;\n};\nexport type AppDispatch = typeof store.dispatch;\n","import cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[] | undefined,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoTable: React.FC<Props> = ({ todos, selectedTodo }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <tbody>\n      {todos && todos.map(todo => {\n        return (\n          <tr key={todo.id} data-cy=\"todo\">\n            <td className=\"is-vcentered\">{todo.id}</td>\n            {todo.completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={cn({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {selectedTodo && todo.id === selectedTodo.id ? (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button is-link\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(actions.removeTodo());\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(actions.setTodo(todo));\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoTable } from '../TodoTable/TodoTable';\n\ntype Props = {\n  todos: Todo[] | undefined,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n}) => {\n  if (todos?.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <TodoTable\n        todos={todos}\n        selectedTodo={selectedTodo}\n      />\n\n    </table>\n  );\n};\n","type Props = {\n  query: string,\n  status: string,\n  todoStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  onSelect: (value: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  status,\n  todoStatus,\n  onSelect,\n}) => {\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onSelect(event?.target.value);\n  };\n\n  const handleClear = () => {\n    onSelect('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={todoStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleOnChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  userId: number,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  userId,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState <User | null >();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!selectedTodo) {\n      return;\n    }\n\n    getUser(selectedTodo?.userId).then(res => {\n      setUser(res);\n    });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(actions.removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './app/hooks';\nimport { actions as filterActions } from './features/filter';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const { latestTodos } = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await getTodos();\n\n        dispatch(todosActions.addTodos(response));\n      } catch (fetchError) {\n        throw new Error(`Data could not be fetched: ${fetchError}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [dispatch]);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.changeStatus(event.target.value as Status));\n  };\n\n  function filterStatus(value: string): Todo[] | null {\n    switch (value) {\n      case Status.All:\n        return latestTodos;\n\n      case Status.Active:\n        return latestTodos.filter(todo => !todo.completed);\n\n      case Status.Completed:\n        return latestTodos.filter(todo => todo.completed);\n\n      default:\n        return null;\n    }\n  }\n\n  const visibleTodos = filterStatus(status)?.filter(\n    todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={status}\n                todoStatus={handleStatusChange}\n                query={query}\n                onSelect={(value) => dispatch(filterActions.changeQuery(value))}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          userId={selectedTodo.userId}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}