{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["actions","payload","type","currentTodoReducer","state","action","initialState","status","query","filterReducer","latestTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","selectedTodo","dispatch","useDispatch","length","className","map","todo","id","completed","title","onClick","TodoFilter","todoStatus","setQuery","value","onChange","placeholder","event","target","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","userId","useState","user","setUser","useEffect","getUser","href","name","useAppSelector","useSelector","App","isLoading","setIsLoading","a","response","todosActions","Error","fetchData","visibleTodos","filterStatus","toLowerCase","includes","filterActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55351ec8.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (payload: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET', payload,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = { type: 'filter/CHANGE_STATUS', payload: Status };\ntype QueryAction = { type: 'filter/CHANGE_QUERY', payload: string };\ntype ClearAction = { type: 'filter/CLEAR_QUERY' };\n\ntype Actions = StatusAction | QueryAction | ClearAction;\n\nconst changeStatus = (payload: Status): StatusAction => ({\n  type: 'filter/CHANGE_STATUS', payload,\n});\n\nconst changeQuery = (payload: string): QueryAction => ({\n  type: 'filter/CHANGE_QUERY', payload,\n});\n\nconst clear = (): ClearAction => ({ type: 'filter/CLEAR_QUERY' });\n\nconst initialState = {\n  status: 'all',\n  query: '',\n};\n\nconst filterReducer = (state = initialState, actions: Actions) => {\n  switch (actions.type) {\n    case 'filter/CHANGE_STATUS':\n      return {\n        ...state,\n        status: actions.payload,\n      };\n    case 'filter/CHANGE_QUERY':\n      return {\n        ...state,\n        query: actions.payload,\n      };\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { clear, changeQuery, changeStatus };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = { type: 'todos/SET_TODOS', payload: Todo[] };\n\nconst addTodos = (payload: Todo[]): SetTodos => ({\n  type: 'todos/SET_TODOS', payload,\n});\n\nconst initialState = {\n  latestTodos: [],\n};\n\nconst todosReducer = (state = initialState, actions: SetTodos) => {\n  switch (actions.type) {\n    case 'todos/SET_TODOS':\n      return {\n        ...state,\n        latestTodos: [...state.latestTodos, ...actions.payload],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { addTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\n// export type RootState = ReturnType<typeof store.getState>;\nexport type RootState = {\n  currentTodo: ReturnType<typeof currentTodoReducer>;\n  filter: ReturnType<typeof filterReducer>;\n  todos: ReturnType<typeof todosReducer>;\n};\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todos: Todo[] | undefined,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n}) => {\n  const dispatch = useDispatch();\n\n  if (todos?.length === 0) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos && todos.map(todo => {\n          return (\n            <tr key={todo.id} data-cy=\"todo\" className=\"\">\n              <td className=\"is-vcentered\">{todo.id}</td>\n              {todo.completed ? (\n                <td className=\"is-vcentered\">\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </td>\n              ) : (\n                <td className=\"is-vcentered\" />\n              )}\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                {selectedTodo && todo.id === selectedTodo.id ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(actions.removeTodo());\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(actions.setTodo(todo));\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n\n    </table>\n  );\n};\n","type Props = {\n  query: string,\n  status: string,\n  todoStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  setQuery: (value: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  status,\n  todoStatus,\n  setQuery,\n}) => {\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event?.target.value);\n  };\n\n  const handleClear = () => {\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={todoStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleOnChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClear}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  userId: number,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  userId,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState <User | null >();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!selectedTodo) {\n      return;\n    }\n\n    getUser(selectedTodo?.userId).then(res => {\n      setUser(res);\n    });\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                dispatch(actions.removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { useAppSelector } from './app/hooks';\nimport { actions as filterActions } from './features/filter';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const { latestTodos } = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await getTodos();\n\n        dispatch(todosActions.addTodos(response));\n      } catch (fetchError) {\n        throw new Error(`Data could not be fetched: ${fetchError}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [dispatch]);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.changeStatus(event.target.value as Status));\n  };\n\n  function filterStatus(value: string): Todo[] | null {\n    switch (value) {\n      case 'all':\n        return latestTodos;\n\n      case 'active':\n        return latestTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return latestTodos.filter(todo => todo.completed);\n\n      default:\n        return null;\n    }\n  }\n\n  const visibleTodos = filterStatus(status)?.filter(\n    todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={status}\n                todoStatus={handleStatusChange}\n                query={query}\n                setQuery={(value) => dispatch(filterActions.changeQuery(value))}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          userId={selectedTodo.userId}\n          selectedTodo={selectedTodo}\n        />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}